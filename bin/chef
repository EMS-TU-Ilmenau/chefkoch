#!/usr/bin/env python
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK
# https://www.tu-ilmenau.de/it-ems/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#  PURPOSE
#  =======
#  A compute cluster cuisine for distributed scientific computing in python.
#
#  Requires: probably quite a few packages
#
#  Author: Christoph Wagner, Sophie Altenburg, Johannes van Reimersdahl
#


if __name__ == '__main__':
    import chefkoch
    import sys
    from arghandler import *

    REMOTES = "remotes"
    TOKEN = "token"
    ARG_VERBOSE = {
        TOKEN: ("-v", "--verbose"),
        "action": "store_true",
        "help": "Increase verbosity of output."
    }
    ARG_DEBUGLEVEL = {
        TOKEN: ("-d", "--debug-level"),
        "type": int,
        "default": 0,
        "help": "Set debug level."
    }

    args = None

    def env_add_arguments(parser, *args):
        """Wrapper to call parser.add_argument(*arg) for each arg in args"""
        for arg in args:
            token = arg.pop(TOKEN, ())
            parser.add_argument(*token, **arg)

    def env_parse_and_apply(parser, context, arguments):
        """
        Setup global arguments, parse them and set up environment accordingly.

        Installs the `--verbose` and `--debug-level` command line options and
        evaluates them. The evaluated arguments will be put into global
        variable `args` and furthre evaluated. Creates a global `logging`
        object in the global namespace and configures it according to the
        corresponding command line settings.

        Args:
            parser (ArgumentParser): argument parser to expand and evaluate
            context: context object as supplied by ArgumentHandler
            input_args (list): List of command line arguments to parse

        Returns:
            None
        """
        global args
        env_add_arguments(parser, ARG_VERBOSE, ARG_DEBUGLEVEL)
        args = parser.parse_args(arguments)

    @subcmd("cook")
    def cmd_cook(parser, context, arguments):
        parser.description = "Cook something and then return the result."
        env_parse_and_apply(parser, context, arguments)
        return #something

    @subcmd("check")
    def cmd_check(parser, context, arguments):
        parser.description = "Check something and then return the result."
        env_parse_and_apply(parser, context, arguments)

    @subcmd("inspect")
    def cmd_inspect(parser, context, arguments):
        parser.description = "Inspect something and then return the result."
        env_parse_and_apply(parser, context, arguments)

    @subcmd("version")

        if args.verbose: print("Increased verbosity.")

        print("chefkoch Version: " + str(chefkoch.version))
        print("\nChefkoch is a compute cluster cuisine for distributed "
                 + "scientific computing in python.")
        print("\n(2019) EMS Research Group TU Ilmenau")
        print("http://github.com/EMS-TU-Ilmenau/chefkoch")
        print("https://www.tu-ilmenau.de/it-ems")
    def cmd_version(parser, context, arguments):
        env_parse_and_apply(parser, context, arguments)

    handler = ArgumentHandler(enable_autocompletion = True)
    handler.description = """A compute cluster cuisine for distributed
                            scientific computing in python."""
    handler.run(sys.argv[1:])
